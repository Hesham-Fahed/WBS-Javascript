SELECT year FROM cars WHERE year IN (1, 2003, 2004, 2005)

Indices
UNIQUE  - Alle Werte in einer Spalte einzigartig sind
INDEX   - Erhöht Suchgeschwindigkeit, Verlangsamt Creates und Updates und Deletes
PRIMARY - Identifiziert eine Zeile eineindeutig, sind immer UNIQUE und haben einen INDEX

Structured Query Language

C   INSERT INTO users (`id`, `name`, `password`) VALUES (NULL, 'ollo', '123')
R   SELECT `id`, `name` FROM users WHERE age >= 18
U   UPDATE SET name='peter', password='456' WHERE id = 4
D   DELETE FROM users WHERE age >= 18

Tabellenschema
--------------
cars       1-to-many 1-to-many
id  year   color_id  model_id
1   2002   1         1
2   2009   1         2
3   2015   5         3
4   2003   2         1
5   2003   2         1
6   1999   4         3
Primary key ist id

models                  1-to-many        1-to-many
id   name          hp   manufacturer_id  class_id
1    Fiesta 1.1    49   1                1
2    Focus 1.8TD   95   1                2
3    Manta FS 16v  110  2                2
Foreign keys sind manufacturer_id und class_id

manufacturers
id  name
1   Ford Motors
2   Opel

classes
id  name
1   Kleinwagen
2   Sportwagen

colors
id   name
1    blue
2    salmon
3    green
4    red
5    gray

models_colors many-to-many pivot table
model_id   color_id
1          1
1          2
1          3
1          4
2          5
2          2
2          1
Primary key ist die Kombination aus model_id und color_id


SELECT * FROM models M
LEFT JOIN models_colors MC ON MC.id = M.id
JOIN colors C ON C.id = MC.color_id

one-to-many relation:
    Ein A (primary key, eg. models)
    kann viele B (foreign key, eg. cars) haben
    Mit "foreign key" abgebildet

many-to-many relation:
    Viele A (colors)
    können viele B (models) haben
    und umgekehrt
    mit "pivot table" abgebildet

Normalisierung
    https://de.wikipedia.org/wiki/Normalisierung_(Datenbank)
    1-3NF sind wichtig!

